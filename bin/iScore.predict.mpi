#!/usr/bin/env python
#!/usr/bin/env python
import os
import subprocess
import argparse
from iScore.graphrank.graph import iscore_graph_mpi
from iScore.graphrank.kernel import iscore_kernel_mpi
from iScore.graphrank.rank import iscore_svm

from iScore.energetic.energy import iscore_energy
from iScore.function.score import iscore

from mpi4py import MPI

##########################################################################
# Predict the class of the graphs located by default in ./graph
# using the trained model stored in the archive file training_set.tar.gz
#########################################################################

# parse arguments
parser = argparse.ArgumentParser(description=' iScore - Predict the class of new conformations')

# where the kernels are stored
parser.add_argument('-gt', '--ground_truth',default=None,type=str,help='File containing the ground truth')

# where the kernels are stored
parser.add_argument('--kernel',default='./kernel/',type=str,help='Kernel pickle file to use')

# where the graphs are stored
parser.add_argument('--graph',default='./graph/',type=str,help='Graph pickle file to use')

# archive model to use
parser.add_argument('--archive',default='training_set.tar.gz',help='model archive we want to use')

# get the args
args = parser.parse_args()


comm = MPI.COMM_WORLD
rank = comm.Get_rank()
size = comm.Get_size()

# create the graphs
if rank == 0:
	if not os.path.isdir(args.graph):
		os.mkdir(args.graph)

comm.Barrier()

iscore_graph_mpi(outdir=args.graph,rank=rank,size=size,mpi_comm=comm)

# compute the kernels
if rank == 0:
	if not os.path.isdir(args.kernel):
		os.mkdir(args.kernel)

comm.Barrier()

kfile = os.path.join(args.kernel,'kernel.pckl')
iscore_kernel_mpi(test_graph=args.graph,train_archive=args.archive,outfile=kfile,rank=rank,size=size)

comm.Barrier()

# predcit the model
if rank == 0:
	iscore_svm(load_model=None,package_name=args.archive,testID=args.ground_truth)

	# add energy terms
	iscore_energy(method=args.energy)

	# # final energy function
	iscore()


