#!/usr/bin/env python
import os
from iScore.generate_graph import GenGraph
import argparse



parser = argparse.ArgumentParser()
parser.add_argument('--pdb_path', type = str, default='./pdb',help='path where to find the PDB files')
parser.add_argument('--pssm_path', type = str, default='./pssm',help='path where to find the PSSM files')
parser.add_argument('--select', type = str, default=None,help='File containing the name of the pdb to process')
parser.add_argument('--outdir',type = str, default='./graph/',help='Directory where to store the graphs')
parser.add_argument('--aligned',action='store_true',help='PSSM and PDB are aligned')
args = parser.parse_args()

# make sure that the dir containing the PDBs exists
if not os.path.isdir(args.pdb_path):
	raise NotADirectoryError(args.pdb_path + ' is not a directory')
else:
	pdb_files = os.listdir(args.pdb_path)

# make sure that the dir containing the PSSMs exists
if not os.path.isdir(args.pssm_path):
	raise NotADirectoryError(args.pssm_path + ' is not a directory')
else:
	pssm_files = os.listdir(args.pssm_path)

# check if we want to select a subset of PDBs
if args.select is not None:
	if not os.path.isfile(args.select):
		raise FileNotFoundError(args.select + ' is not a file')
	else:
		with open(args.select,'r') as f:
			select = f.readlines()
else:
	select = None

# get the list of PDB names
pdbs = list(filter(lambda x: x.endswith('.pdb'),os.listdir(args.pdb_path)))
if select is not None:
	pdbs = list(filter(lambda x: x.startswith(select),pdbs))

# create the output file
if not os.path.isdir(args.outdir):
	os.mkdir(args.outdir)

# loop over all the PDBs
for name in pdbs:

	print('Creating graph of PDB %s' %name)

	# pdb name
	pdbfile = os.path.join(args.pdb_path,name)

	# mol name and base name
	mol_name = os.path.splitext(name)[0]
	base_name = mol_name.split('_')[0]

	# pssms files
	pssmA = os.path.join(args.pssm_path,mol_name+'.A.pdb.pssm')
	pssmB = os.path.join(args.pssm_path,mol_name+'.B.pdb.pssm')

	# check if the pssms exists
	if os.path.isfile(pssmA) and os.path.isfile(pssmB):
		pssm = {'A':pssmA,'B':pssmB}
	else:
		raise FileNotFoundError(pssmA + ' or ' + pssmB + ' not found')


	# output file
	graphfile = os.path.join(args.outdir+mol_name+'.pckl')

	# create the graphs
	gen = GenGraph(pdbfile,pssm,aligned=args.aligned,outname=graphfile)




